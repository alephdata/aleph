kind: Service
apiVersion: v1
metadata:
  name: task-queue
  namespace: {{ .Values.global.namespace }}
  labels:
    app: task-queue
spec:
  selector:
    app: task-queue
  ports:
    - name: epmd
      port: 4369
    - name: queue-port
      port: 5672
    - name: management-console
      port: 15672
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: task-queue
  namespace: {{ .Values.global.namespace }}
  annotations:
    date/deploy-date: {{ now | quote }}
spec:
  selector:
    matchLabels:
      app: task-queue
  serviceName: task-queue
  replicas: 1
  template:
    metadata:
      labels:
        app: task-queue
    spec:
      terminationGracePeriodSeconds: 10
      affinity: # Ask k8s to preferr that pods are placed across zones if available
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Values.global.reponame }}
              topologyKey: failure-domain.beta.kubernetes.io/zone
      containers:
        - name: task-queue
          image: rabbitmq:management-alpine
          ports:
            - name: epmd-port
              containerPort: 4369
            - name: queue-port
              containerPort: 5672
            - name: management-port
              containerPort: 15672
          resources:
            requests:
              cpu: {{ .Values.queue.resources.requests.cpu }}
              memory: {{ .Values.queue.resources.requests.memory }}
            limits:
              cpu: {{ .Values.queue.resources.limits.cpu }}
              memory: {{ .Values.queue.resources.requests.memory }}
          env: 
            - name: RABBITMQ_NODENAME
              value: "rabbit@task-queue"
          volumeMounts:
            - name: data
              mountPath: /var/lib/rabbitmq
  volumeClaimTemplates:
    - metadata:
        name: data
        namespace: {{ .Values.global.namespace }}
      spec:
        {{- if (.Values.storage.queue) and (.Values.storage.queue.pvc) }}
        selector:
          matchLabels:
            service: task-queue
        {{- end }}
        accessModes:
          - ReadWriteOnce
        storageClassName: ssd
        resources:
          requests:
            storage: {{ .Values.queue.resources.requests.storage }}
