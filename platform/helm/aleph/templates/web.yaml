apiVersion: v1
kind: Service
metadata:
  name: web
  namespace: aleph
  labels:
    app: web
spec:
  type: NodePort
  selector:
    app: web
  ports:
    - port: 80
      targetPort: 80
      name: http
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: web-config
  namespace: aleph
data:
  mime.types: |
    types {
        text/html                                        html htm shtml;
        text/css                                         css;
        text/xml                                         xml;
        image/gif                                        gif;
        image/jpeg                                       jpeg jpg;
        application/javascript                           js;
        image/png                                        png;
        image/svg+xml                                    svg svgz;
        image/tiff                                       tif tiff;
        image/x-icon                                     ico;
        image/x-jng                                      jng;
        application/font-woff                            woff;
        application/json                                 json;
        application/zip                                  zip;
    }
  nginx.conf: |
    worker_processes 3;

    events {
      worker_connections 1024;
    }

    http {
      include mime.types;
      index index.html;
      sendfile on;
      client_max_body_size 2000g;
      client_body_timeout 84600s;
      proxy_connect_timeout 600s;
      proxy_send_timeout 84600s;
      proxy_read_timeout 84600s;
      send_timeout 84600s;
      proxy_buffering off;
      proxy_request_buffering off;
      keepalive_timeout 650;
      keepalive_requests 10000;

      upstream api {
        server api.aleph.svc.cluster.local:8000;
      }

      server {
        listen 80 default_server;
        
        #if ($http_x_forwarded_proto = "http") {
        #  return 301 https://$host$request_uri;
        #}

        location / {
          root /assets;
          try_files $uri $uri/ /index.html;
          expires 2d;
          access_log off;
          add_header X-debug-host $host;
          add_header X-debug-hostname $hostname;
          add_header Cache-Control "public";
          gzip_vary on;
          gzip_static on;
          gzip_proxied any;
          gzip_types text/plain text/xml text/css text/javascript application/x-javascript;
        }

        location /.well-known {
          root /assets;
        }

        location /api {
          proxy_pass         http://api;
          proxy_redirect     off;
          proxy_set_header   Host $http_host;
          proxy_set_header   X-Real-IP $remote_addr;
          proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  namespace: aleph
  labels:
    app: web
spec:
  replicas: {{ .Values.web.replicas }}
  selector:
    matchLabels:
      app: web
  strategy:
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 50%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: web
    spec:
      affinity: # Ask k8s to preferr that pods are placed across zones if available
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Values.global.reponame }}
              topologyKey: failure-domain.beta.kubernetes.io/zone
      restartPolicy: Always
      volumes:
        - name: web-config
          configMap:
            name: web-config
      containers:
        - name: web
          image: alephdata/aleph-ui-production:{{ .Values.global.imagetag }}
          imagePullPolicy: Always
          resources:
            requests:
              memory: {{ .Values.web.resources.requests.memory }}
              cpu: {{ .Values.web.resources.requests.cpu }}
            limits:
              memory: {{ .Values.web.resources.limits.memory }}
              cpu: {{ .Values.web.resources.limits.cpu }}
          ports:
            - containerPort: 80
              name: http
          volumeMounts:
            - name: web-config
              mountPath: /etc/nginx
              readOnly: true
          livenessProbe:
            httpGet:
              path: /healthz
              port: 80
              httpHeaders:
                - name: X-Forwarded-Proto
                  value: https
            initialDelaySeconds: 3
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: 80
              httpHeaders:
                - name: X-Forwarded-Proto
                  value: https
            initialDelaySeconds: 3
            periodSeconds: 5
