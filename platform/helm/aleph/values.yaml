global:
  reponame: aleph
  # Make sure the namespace exists first. Edit and apply core/namespace.yaml
  namespace: aleph
  dbInstance: "occrp-data-testing-223805:us-east1:staging-db=tcp:5432"
  repository: alephdata/aleph
  imagetag: develop
  domain: staging.data.occrp.org

## External Dependencies

keel:
  enabled: true
  # keel policy (all/major/minor/patch/force)
  policy: force
  # trigger type, defaults to events such as pubsub, webhooks
  trigger: poll
  # polling schedule
  pollSchedule: "@every 1m"
  # approvals required to proceed with an update
  approvals: 0
  # images to track and update
  images:
    - repository: global.repository
      tag: global.imagetag

cert-manager:
  rbac:
    create: true

nginx-ingress:
  # https://kubernetes.github.io/ingress-nginx/deploy/#using-helm
  # based on: https://github.com/helm/charts/blob/master/stable/nginx-ingress/values.yaml
  rbac:
    create: true

  controller:
    replicaCount: 1
    service:
      #TODO: set this
      loadBalancerIP: ""
      externalTrafficPolicy: "Local"
    extraArgs:
      default-ssl-certificate: "aleph/tls-staging.data.occrp.org"
    defaultBackendService: "aleph/web"
    config:
      # cf. https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#configuration-options
      # also, https://github.com/kubernetes/ingress-nginx
      # networking
      disable-ipv6: 'true'
      disable-ipv6-dns: 'true'
      use-geoip: 'false'
      use-http2: 'true'
      use-gzip: 'true'
      hsts: 'false'
      # large-chunk proxy
      client-header-timeout: '30'
      client-body-buffer-size: '1024k'
      proxy-connect-timeout: '3600'
      proxy-read-timeout: '3600'
      proxy-send-timeout: '84600'
      proxy-stream-timeout: '3600'
      proxy-buffering: 'off'
      proxy-request-buffering: 'off'
      proxy-buffer-size: '1024k'
      proxy-headers-hash-max-size: '1024'
      proxy-headers-hash-bucket-size: '1024'
      proxy-body-size: '2000g'
      client-max-body-size: '2000g'
      client-body-timeout: '84600s'
      keepalive-timeout: '650'
      keepalive-requests: '10000'
      send-timeout: '84600s'
      ssl-redirect: 'true'
      # replace nginx status page:
      enable-vts-status: 'false'

  defaultBackend:
    enabled: false

## Aleph's internal configurations

api:
  minReplicas: 1
  maxReplicas: 2
  resources:
    requests:
      memory: 2Gi
      cpu: 500m
    limits:
      memory: 3Gi
      cpu: 1000m


certs:
  email: data@occrp.org


config:
  ALEPH_URL_SCHEME: http
  ALEPH_APP_TITLE: "OCCRP Data (Staging)"
  ALEPH_OCR_VISION_API: "false"
  ALEPH_CORS_ORIGINS: "*"
  ALEPH_ARCHIVE_TYPE: gs
  ALEPH_ARCHIVE_BUCKET: "staging-data-archive"
  ALEPH_PASSWORD_LOGIN: "true"
  ALEPH_ADMINS: "admin@example.com"
  ALEPH_MAIL_FROM: notifications@example.com
  ALEPH_MAIL_HOST: mail.aleph.svc.cluster.local
  ALEPH_MAIL_USERNAME: ""
  ALEPH_MAIL_PASSWORD: ""
  ALEPH_MAIL_PORT: "25"
  ALEPH_MAIL_TLS: "false"
  ALEPH_MAIL_SSL: "false"
  ALEPH_UI_URL: https://staging.data.occrp.org
  ALEPH_FAVICON: https://cdn.occrp.org/common/logo/RedTransparent_globe.png
  ALEPH_LOGO: https://cdn.occrp.org/common/logo/RedTransparent_globe.png
  ALEPH_ELASTICSEARCH_SHARDS: "5"
  ALEPH_OAUTH: "false"
  ALEPH_OAUTH_KEY: key-name
  ALEPH_OAUTH_NAME: provider-name
  ALEPH_OAUTH_SCOPE: read
  ALEPH_OAUTH_BASE_URL: ""
  ALEPH_OAUTH_TOKEN_URL: ""
  ALEPH_OAUTH_AUTHORIZE_URL: ""
  ALEPH_STACKDRIVER_TRACE_PROJECT_ID: 'occrp-data-testing-223805'
  ALEPH_TRACE_SAMPLING_RATE: '0.001'
  ALEPH_CELERY_TRACE_SAMPLING_RATE: '0.00001'


convertDocument:
  minReplicas: 1
  maxReplicas: 3
  resources:
    requests:
      memory: 500Mi
      cpu: 500m
    limits:
      memory: 600Mi
      cpu: 1000m


extractEntities:
  minReplicas: 1
  maxReplicas: 3
  resources:
    requests:
      memory: 500Mi
      cpu: 500m
    limits:
      memory: 1500Mi
      cpu: 1000m


index:
  replicas: 3
  resources:
    requests:
      memory: 2.2Gi
      cpu: 300m
      storage: 100Gi
    limits:
      memory: 2.5Gi
      cpu: 1000m
  minMasterNodes: "2"
  ES_JAVA_OPTS_MEMORY_LIMIT: -Xms2g -Xmx2g


indexAdmin:
  resources:
    limits:
      memory: 1Gi



queue:
  image: rabbitmq:management-alpine
  replicas: 1
  resources:
    requests:
      memory: 500Mi
      cpu: 200m
      storage: 10Gi
    limits:
      memory: 1.5Gi
      cpu: 400m


recognizeText:
  minReplicas: 1
  maxReplicas: 3
  resources:
    requests:
      memory: 800Mi
      cpu: 1000m
    limits:
      memory: 1400Mi
      cpu: 1500m


redis:
  maxMemory: 2g
  resources:
    requests:
      memory: 1Gi
      cpu: 300m
      storage: 10Gi
    limits:
      memory: 2Gi
      cpu: 600m


scheduler:
  resources:
    requests:
      memory: 200Mi
      cpu: 200m
    limits:
      memory: 500Mi
      cpu: 500m


storage:
  index:
  queue:
  redis:



web:
  replicas: 2
  maxSurge: 2
  resources:
    requests:
      memory: 200Mi
      cpu: 200m
    limits:
      memory: 300Mi
      cpu: 500m


worker:
  minReplicas: 2
  maxReplicas: 10
  resources:
    requests:
      memory: 500Mi
      cpu: 300m
    limits:
      memory: 4Gi
      cpu: 1000m
