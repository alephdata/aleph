version: "3.2"

services:
  postgres:
    image: postgres:10.0
    hostname: postgres
    ports:
      - "127.0.0.1:15432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: aleph
      POSTGRES_PASSWORD: aleph
      POSTGRES_DATABASE: aleph

  elasticsearch:
    image: ghcr.io/alephdata/aleph-elasticsearch:fc76f89bb369132171af4629cc12cd7f57098ba6
    hostname: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "127.0.0.1:19200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  redis:
    image: redis:alpine
    command: ["redis-server", "--save", "3600", "10"]
    volumes:
      - redis-data:/data

  convert-document:
    image: ghcr.io/alephdata/convert-document:d3d36132c684b89f6b13a84c40388cf96744ff85
    read_only: true
    restart: on-failure
    user: app
    tmpfs: /tmp

  ingest-file:
    image: ghcr.io/alephdata/ingest-file:6b8fa09397f1207a7168e4c30fe47fd73cb33be3
    hostname: ingest
    tmpfs: /tmp
    volumes:
      - archive-data:/data
    depends_on:
      - postgres
      - redis
      - convert-document
    restart: on-failure
    env_file:
      - aleph.env

  # translate:
  #   build:
  #     context: services/translate
  #   image: alephdata/translate:${ALEPH_TAG:-latest}
  #   volumes:
  #   - archive-data:/data
  #   - "./services/translate/translate:/translate/translate"
  #   - "/:/host"
  #   restart: on-failure
  #   environment:
  #     GOOGLE_APPLICATION_CREDENTIALS: '/host/.../translate-service-account.json'
  #     GOOGLE_PROJECT_ID: my-project
  #   env_file:
  #   - aleph.env

  app:
    build:
      context: .
    image: alephdata/aleph:${ALEPH_TAG:-latest}
    hostname: aleph
    command: /bin/bash
    depends_on:
      - postgres
      - elasticsearch
      - redis
      # - translate
      - ingest-file
    tmpfs: /tmp
    volumes:
      - archive-data:/data
      - "./aleph:/aleph/aleph"
      - "./site:/aleph/site"
      - "./contrib:/aleph/contrib"
      - "./mappings:/aleph/mappings"
      - "/:/host"
    cap_add:
      - SYS_PTRACE
    environment:
      ALEPH_DEBUG: "true"
      ALEPH_SECRET_KEY: "development"
    env_file:
      - aleph.env

  api:
    build:
      context: .
    image: alephdata/aleph:${ALEPH_TAG:-latest}
    command: aleph run -h 0.0.0.0 -p 5000 --with-threads --reload --debugger
    ports:
      - "127.0.0.1:5000:5000"
    restart: on-failure
    depends_on:
      - postgres
      - elasticsearch
      - redis
      - ingest-file
    tmpfs: /tmp
    volumes:
      - archive-data:/data
      - "./aleph:/aleph/aleph"
      - "./site:/aleph/site"
    environment:
      ALEPH_DEBUG: "true"
      ALEPH_PROFILE: "false"
      ALEPH_SECRET_KEY: "development"
    env_file:
      - aleph.env

  ui:
    build:
      context: ui
    image: alephdata/aleph-ui:${ALEPH_TAG:-latest}
    depends_on:
      - api
    command: npm run start
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - "./ui/src:/alephui/src:delegated"
      - "./ui/public:/alephui/public:delegated"
      - "./ui/package.json:/alephui/package.json:delegated"
    environment:
      PORT: "8080"
      CI: "true"
    env_file:
      - aleph.env

volumes:
  archive-data: {}
  elasticsearch-data: {}
  postgres-data: {}
  redis-data: {}
