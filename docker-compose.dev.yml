version: "3.2"

services:
  postgres:
    image: postgres:10.0
    hostname: postgres
    ports:
      - "127.0.0.1:15432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: aleph
      POSTGRES_PASSWORD: aleph
      POSTGRES_DATABASE: aleph

  elasticsearch:
    image: ghcr.io/alephdata/aleph-elasticsearch:3bb5dbed97cfdb9955324d11e5c623a5c5bbc410
    hostname: elasticsearch
    restart: on-failure
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "http.cors.enabled=true"
      - "http.cors.allow-origin=*"
      - "http.cors.allow-headers=*"
      - "http.cors.allow-credentials=true"
    ports:
      - "127.0.0.1:19200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  dejavu:
    image: appbaseio/dejavu:3.6.0
    container_name: dejavu
    ports:
      - '1358:1358'
    depends_on:
      - elasticsearch

  redis:
    image: redis:alpine
    command: [ "redis-server", "--save", "3600", "10" ]
    volumes:
      - redis-data:/data

  ingest-file:
    image: ghcr.io/alephdata/ingest-file:3.18.4
    hostname: ingest
    tmpfs: /tmp
    volumes:
      - archive-data:/data
    depends_on:
      - postgres
      - redis
    restart: on-failure
    env_file:
      - aleph.env

  # translate:
  #   build:
  #     context: services/translate
  #   image: alephdata/translate:${ALEPH_TAG:-latest}
  #   volumes:
  #   - archive-data:/data
  #   - "./services/translate/translate:/translate/translate"
  #   - "/:/host"
  #   restart: on-failure
  #   environment:
  #     GOOGLE_APPLICATION_CREDENTIALS: '/host/.../translate-service-account.json'
  #     GOOGLE_PROJECT_ID: my-project
  #   env_file:
  #   - aleph.env

  app:
    build:
      context: .
    image: ghcr.io/alephdata/aleph:${ALEPH_TAG:-latest}
    hostname: aleph
    command: /bin/bash
    depends_on:
      - postgres
      - elasticsearch
      - redis
      # - translate
      - ingest-file
    tmpfs: /tmp
    volumes:
      - archive-data:/data
      - "./aleph:/aleph/aleph"
      - "./site:/aleph/site"
      - "./contrib:/aleph/contrib"
      - "./mappings:/aleph/mappings"
      - "~:/host"
    cap_add:
      - SYS_PTRACE
    environment:
      ALEPH_DEBUG: "true"
      ALEPH_SECRET_KEY: "development"
    env_file:
      - aleph.env

  api:
    build:
      context: .
    image: ghcr.io/alephdata/aleph:${ALEPH_TAG:-latest}
    command: python3 -m debugpy --listen 0.0.0.0:5678 -m flask run -h 0.0.0.0 -p 5000 --with-threads --reload --debugger
    ports:
      - "127.0.0.1:5000:5000"
      - "127.0.0.1:5678:5678"
    restart: on-failure
    depends_on:
      - postgres
      - elasticsearch
      - redis
      - ingest-file
    tmpfs: /tmp
    volumes:
      - archive-data:/data
      - "./aleph:/aleph/aleph"
      - "./site:/aleph/site"
    environment:
      ALEPH_DEBUG: "true"
      ALEPH_PROFILE: "false"
      ALEPH_SECRET_KEY: "development"
      FLASK_APP: "aleph.wsgi"
    env_file:
      - aleph.env

  ui:
    build:
      context: ui
    image: ghcr.io/alephdata/aleph-ui:${ALEPH_TAG:-latest}
    depends_on:
      - api
    command: "bash -c 'rsync --archive --inplace --no-compress --whole-file /node_modules /alephui && npm run start'"
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - "./ui/src:/alephui/src:cached"
      - "./ui/package.json:/alephui/package.json:cached"
      - "./ui/package-lock.json:/alephui/package-lock.json:cached"
      - "./ui/craco.config.js:/alephui/craco.config.js:cached"
      - "./ui/node_modules:/alephui/node_modules:delegated"
    environment:
      PORT: "8080"
      CI: "true"
    env_file:
      - aleph.env

  worker:
    image: alephdata/aleph:${ALEPH_TAG:-3.13.2-rc3}
    command: aleph worker
    restart: on-failure
    depends_on:
      - postgres
      - elasticsearch
      - redis
      - ingest-file
    tmpfs:
      - /tmp
    volumes:
      - archive-data:/data
    env_file:
      - aleph.env

volumes:
  archive-data: {}
  elasticsearch-data: {}
  postgres-data: {}
  redis-data: {}
