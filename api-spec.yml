swagger: "2.0"
info:
  title: Aleph API Documentation
  description: |
    Aleph is a powerful tool for people who follow the money. It helps investigators to securely access and search 
    large amounts of data - no matter whether they are a government database or a leaked email archive.
    
    # General Overview

    The Aleph web interface is powered by a Flask HTTP API. Aleph supports an extensive API for searching documents 
    and entities. It can also be used to retrieve raw metadata, source documents and other useful details. Aleph's API
    tries to follow a pragmatic approach based on the following principles:

    - All API calls are prefixed with an API version; this version is `/api/2/`.
    - Responses and requests are both encoded as JSON. Requests should have the `Content-Type` and `Accept` headers set to `application/json`.
    - The application uses Representational State Transfer (REST) principles where convenient, but also has some procedural API calls.
    - The API allows API Authorization via an API key or JSON Web Tokens.


    # Authentication and Authorization

    By default, any Aleph search will return only public documents in responses to API requests.
    If you want to access documents which are not marked public, you will need to sign into the tool. This can be
    done through the use on an **API key**.

    The API key for any account can be found by clicking on the "Profile" menu item in the navigation menu.

    The API key must be sent on all queries using the `Authorization` HTTP header:

    ```Authorization: ApiKey 363af1e2b03b41c6b3adc604956e2f66```

    Alternatively, the API key can also be sent as a query parameter under the `api_key` key.

    Similarly, a JWT can be sent in the Authorization header, after it has been returned by the login and/or OAuth processes.
    Aleph does not use session cookies or any other type of stateful API.

  version: 3.2.11
  contact:
    url: https://github.com/alephdata/aleph
  x-logo:
    url: 'https://avatars3.githubusercontent.com/u/26249985?s=200&v=4'
    altText: Aleph logo
  license:
    name: MIT
    url: 'https://github.com/alephdata/aleph/blob/master/LICENSE.txt'
externalDocs:
  description: Find out more about Aleph, a suite of data analysis tools for investigators.
  url: 'https://docs.alephdata.org/'
host: data.occrp.org
basePath: /api/2
schemes:
  - https

tags:
  - name: "Collection"
    x-displayName: "Collections API"
    description: |
      Create and manage collections.
  - name: "Entity"
    x-displayName: "Entities and Search API"
    description: |
      Search, create and manage entities.
  - name: "Ingest"
    x-displayName: "Ingest API"
    description: |
      Upload documents to a collection.
  - name: "Xref"
    x-displayName: "Cross-reference API"
    description: |
      Cross-reference entities of a collection with other collections.
  - name: "Status"
    x-displayName: "Systme Status API"
    description: |
      Get an overview of ongoing tasks
  - name: "Archive"
    x-displayName: "Archive API"
    description: |
      Download blobs from the archive.
  - name: "Alert"
    x-displayName: "Alerts API"
    description: |
      Create and manage alerts.
  - name: "Group"
    x-displayName: "Groups API"
    description: |
      List authorization groups
  - name: "Notification"
    x-displayName: "Notifications API"
    description: |
      Fetch and manage notifications
  - name: "Permission"
    x-displayName: "Permissions API"
    description: |
      Fetch and manage permissions on a collection
  - name: "Query Log"
    x-displayName: "Query Log API"
    description: |
      Fetch and delete query logs

paths:
  /alerts:
    get:
      summary: List alerts
      description: Returns a list of alerts for the user.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/AlertsResponse'
      tags: ["Alert"]
    post:
      summary: Create an alert
      description: Creates an alert for a given query string.
      consumes:
        - application/json
      parameters:
        - in: body
          schema:
            type: object
            properties:
              query:
                type: string
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Alert'
      tags: ["Alert"]

  /alerts/{alert_id}:
    get:
      summary: Fetch an alert
      description: Return the alert with id `alert_id`
      parameters:
        - in: path
          name: alert_id
          required: true
          type: integer
          minimum: 1
          description: The alert ID.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Alert'
      tags: ["Alert"]
    delete:
      summary: Delete an alert
      description: Delete the alert with id `alert_id`
      parameters:
        - in: path
          name: alert_id
          required: true
          type: integer
          minimum: 1
          description: The alert ID.
      tags: ["Alert"]

  /archive:
    get:
      summary: Download a blob from the archive
      description: Downloads a binary blob from the blob storage archive.
      parameters:
        - in: query
          name: claim
          type: integer
          description: authorization token for an archive blob
      responses:
        200:
          description: OK
          schema:
            type: file
      tags: ["Archive"]

  /collections:
    get:
      summary: List collections
      description: Returns a list of collections matching a given query. Returns all the collections
               accessible by a user if no query is given.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/CollectionsResponse'
      tags: ["Collection"]
    post:
      summary: Create a collection
      description: Create a collection with the given metadata
      parameters:
        - in: body
          schema:
            $ref: '#/definitions/CollectionCreateSchema'
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Collection'
      tags: ["Collection"]

  /collections/{collection_id}:
    get:
      summary: Get a collection
      description: Return the collection with id `collection_id`
      parameters:
        - in: path
          name: collection_id
          required: true
          type: integer
          minimum: 1
          description: The collection ID.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Collection'
      tags: ["Collection"]
    delete:
      summary: Delete a collection
      description: Delete the collection with id `collection_id`
      parameters:
        - in: path
          name: collection_id
          required: true
          type: integer
          minimum: 1
          description: The collection ID.
      responses:
        204:
          description: ''
      tags: ["Collection"]

  /collections/{collection_id}/process:
    post:
      summary: Process a collection
      description: Start processing the collection with id `collection_id`
      parameters:
        - in: path
          name: collection_id
          required: true
          type: integer
          minimum: 1
          description: The collection ID.
        - in: query
          name: ingest
          type: boolean
        - in: query
          name: reset
          type: boolean
      responses:
        202:
          description: ''
      tags: ["Collection"]

  /collections/{collection_id}/mapping:
    post:
      summary: Load mappings for a collection
      description: Load the mapping for the collection with id `collection_id`
      parameters:
        - in: path
          name: collection_id
          required: true
          type: integer
          minimum: 1
          description: The collection ID.
        - in: body
          name: mapping
          required: true
          type: object
          description: The mapping to apply.
      responses:
        202:
          description: ''
      tags: ["Collection"]

  /collections/{collection_id}/bulk:
    post:
      summary: Load entities into a collection
      description: Bulk load entities into the collection with id `collection_id`
      parameters:
        - in: path
          name: collection_id
          required: true
          type: integer
          minimum: 1
          description: The collection ID.
        - in: query
          name: unsafe
          type: boolean
          description: This will disable checksum security measures in order to allow bulk
                        loading of document data.
        - in: body
          type: array
          items:
            type: object
            properties:
              schema:
                type: string
              properties:
                type: object
          description: Entities to be loaded.
      responses:
        204:
          description: ''
      tags: ["Collection"]

  /collections/{collection_id}/status:
    get:
      summary: Check processing status of a collection
      description: Return the task queue status for the collection with id `collection_id`
      parameters:
        - in: path
          name: collection_id
          required: true
          type: integer
          minimum: 1
          description: The collection ID.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/CollectionStatus'
      tags: ["Collection"]
    delete:
      summary: Cancel processing of a collection
      description: Cancel all queued tasks for the collection with id `collection_id`
      parameters:
        - in: path
          name: collection_id
          required: true
          type: integer
          minimum: 1
          description: The collection ID.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              finished:
                type: integer
              pending:
                type: integer
              running:
                type: integer
              jobs:
                type: array
                items:
                  type: object
                  properties:
                    finished:
                      type: integer
                    pending:
                      type: integer
                    running:
                      type: integer
                    stages:
                      type: array
                      items:
                        type: object
                        properties:
                          finished:
                            type: integer
                          pending:
                            type: integer
                          running:
                            type: integer
                          job_id:
                            type: string
                          stage:
                            type: string
      tags: ["Collection"]

  /search:
    get:
      summary: Search entities
      description: |
        Returns a list of entities matching the given search criteria.

        By default, all queries will return a facet of the collections for which matching documents/entities have been found.
        A filter can be applied to show only results from a particular collection: `?filter:collection_id={collection_id}`.

        If you know you only want to search documents (unstructured, ingested data) or entities (structured data which may
        have been extracted from a dataset, or entered by a human) you can use these arguments with the `/documents`
        or `/entities` endpoints.
      parameters:
        - in: query
          name: q
          type: string
          description: A query string in ElasticSearch query syntax. Can include field searches, such as `title:penguin`
        - in: query
          name: facet
          type: string
          description: Return facet values for the given metadata field, such as `languages`, `countries`, `mime_type` or
                       `extension`. This can be specified multiple times for more than one facet to be added.
        - in: query
          name: filter:{field_name}
          type: string
          description: |
            Filter the results by the given field. This is useful when used in conjunction with facet to create a drill-down mechanism. Useful fields are:
            - `collection_id`, documents belonging to a particular collection.
            - `title`, of the document.
            - `file_name`, of the source file.
            - `source_url`, URL of the source file.
            - `extension`, file extension of the source file.
            - `languages`, in the document.
            - `countries`, associated with the document.
            - `keywords`, from the document.
            - `emails`, email addresses mentioned in the document.
            - `domains`, websites mentioned in the document.
            - `phone_numbers`, mentioned in the document.
            - `dates`, in any of the following formats: yyyy-MM-dd, yyyy-MM, yyyy-MM-d, yyyy-M, yyyy
            - `mime_type`, of the source file.
            - `author`, according to the source file's metadata.
            - `summary`, of the document.
            - `text`, entire text extracted from the document.
            - `created_at`, when the document was added to aleph (yyyy-mm -ddThh:ii:ss.uuuuuu).
            - `updated_at`, when the document was modified in aleph (yyyy -mm-ddThh:ii:ss.uuuuuu).
        - in: query
          name: limit
          type: integer
          description: The number of results to return, max. 10,000.
        - in: query
          name: offset
          type: integer
          description: The number of results to skip at the beginning of the result set.
      produces:
        - application/json
      responses:
        200:
          description: Resturns a list of entities in result
          schema:
            $ref: '#/definitions/EntitiesResponse'
      tags: ["Entity"]

  /search/export:
    get:
      summary: Download the results of a search
      description:
        Downloads all the results of a search as a zip archive; upto a max of 10,000 results.
        Supports the same query parameters as [`/search`](#/paths/~1search/get).
      parameters:
        - in: query
          name: q
          type: string
          description: A query string in ElasticSearch query syntax. Can include field searches, such as `title:penguin`
        - in: query
          name: facet
          type: string
          description: Return facet values for the given metadata field, such as `languages`, `countries`, `mime_type` or
                       `extension`. This can be specified multiple times for more than one facet to be added.
        - in: query
          name: filter:{field_name}
          type: string
          description: |
            Filter the results by the given field. This is useful when used in conjunction with facet to create a drill-down mechanism. Useful fields are:
            - `collection_id`, documents belonging to a particular collection.
            - `title`, of the document.
            - `file_name`, of the source file.
            - `source_url`, URL of the source file.
            - `extension`, file extension of the source file.
            - `languages`, in the document.
            - `countries`, associated with the document.
            - `keywords`, from the document.
            - `emails`, email addresses mentioned in the document.
            - `domains`, websites mentioned in the document.
            - `phone_numbers`, mentioned in the document.
            - `dates`, in any of the following formats: yyyy-MM-dd, yyyy-MM, yyyy-MM-d, yyyy-M, yyyy
            - `mime_type`, of the source file.
            - `author`, according to the source file's metadata.
            - `summary`, of the document.
            - `text`, entire text extracted from the document.
            - `created_at`, when the document was added to aleph (yyyy-mm -ddThh:ii:ss.uuuuuu).
            - `updated_at`, when the document was modified in aleph (yyyy -mm-ddThh:ii:ss.uuuuuu).
        - in: query
          name: limit
          type: integer
          description: The number of results to return, max. 10,000.
        - in: query
          name: offset
          type: integer
          description: The number of results to skip at the beginning of the result set.
      produces:
        - application/zip
      responses:
        200:
          description: OK
          schema:
            type: string
            format: binary
      tags: ["Entity"]

  /match:
    post:
      summary: Query for similar entities
      description:
        Query for similar entities matching a given entity inside a given list of collections.
      parameters:
        - in: body
          schema:
            type: object
            properties:
              schema:
                type: string
                required: true
              properties:
                type: object
        - in: query
          name: collection_ids
          type: array
          items:
            type: string
        - in: query
          name: filter:schema
          type: array
          items:
            type: string
        - in: query
          name: filter:schemata
          type: array
          items:
            type: string
      responses:
        200:
          description: Returns a list of entities in result
          schema:
            $ref: '#/definitions/EntitiesResponse'
      tags: ["Entity"]

  /entities:
    post:
      summary: Create an entity in a collection
      description: Create an entity in a collection with a given schema and a set of given properties.
      parameters:
        - in: body
          schema:
            type: object
            properties:
              schema:
                type: string
                required: true
              properties:
                type: object
              collection_id:
                type: string
                required: true
              foreign_id:
                type: string
      produces:
        - application/json
      responses:
        200:
          description: Resturns the created entity
          schema:
            $ref: '#/definitions/Entity'
      tags: ["Entity"]

  /entities/{entity_id}:
    get:
      summary: Get an entity
      description: Return the entity with id `entity_id`
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Entity'
      tags: ["Entity"]
    post:
      summary: Update an entity
      description: Update the entity with id `entity_id`
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
        - in: body
          schema:
            type: object
            properties:
              schema:
                type: string
              properties:
                type: object
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Entity'
      tags: ["Entity"]
    delete:
      summary: Delete an entity
      description: Delete the entity with id `entity_id`
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
      responses:
        204:
          description: ''
      tags: ["Entity"]

  /entities/{entity_id}/content:
    get:
      summary: Get the content of an entity
      description: Return the text and/or html content of the entity with id `entity_id`
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              headers:
                type: object
              text:
                type: string
              html:
                type: string
        404:
          description: ''
      tags: ["Entity"]

  /entities/{entity_id}/similar:
    get:
      summary: Get similar entities
      description: Get a list of similar entities to the entity with id `entity_id`
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
        - in: query
          name: filter:schema
          type: array
          items:
            type: string
        - in: query
          name: filter:schemata
          type: array
          items:
            type: string
      produces:
        - application/json
      responses:
        200:
          description: Resturns a list of entities in result
          schema:
            $ref: '#/definitions/EntitiesResponse'
      tags: ["Entity"]

  /entities/{entity_id}/references:
    get:
      summary: Get entity references
      description: Get the schema-wise aggregation of references to the entity with id `entity_id`
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        200:
          schema:
            type: object
            properties:
              status:
                type: string
                description: ok
              total:
                type: integer
              results:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    property:
                      type: object
                    schema:
                      type: string
      tags: ["Entity"]

  /entities/{entity_id}/tags:
    get:
      summary: Get entity tags
      description:
        Get tags for the entity with id `entity_id`. Tags include the query string
        to make a search by that particular tag.
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        200:
          schema:
            type: object
            properties:
              status:
                type: string
                description: ok
              total:
                type: integer
              results:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: query string for this tag
                    value:
                      type: string
                    field:
                      type: string
                    count:
                      type: integer
      tags: ["Entity"]

  /collections/{collection_id}/ingest:
    post:
      summary: Upload a document to a collection
      description: Upload a document to a collection with id `collection_id`
      consumes:
       - multipart/form-data
      parameters:
        - in: path
          name: collection_id
          required: true
          type: integer
        - in: formData
          type: file
          description: The file to upload.
        - in: formData
          name: meta
          schema:
            $ref: '#/definitions/DocumentCreateSchema'
      produces:
        - application/json
      responses:
        200:
          schema:
            type: object
            properties:
              status:
                type: string
              id:
                type: integer
                description: id of the uploaded document
      tags: ["Ingest", "Collection"]

  /collections/{collection_id}/xref:
    get:
      summary: Fetch cross-reference matches
      description: Fetch cross-reference matches grouped by collection, for entities in the collection with id `collection_id`
      parameters:
        - in: path
          name: collection_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/XrefCollectionResponse'
      tags: ["Xref", "Collection"]
    post:
      summary: Generate cross-reference matches
      description: Generate cross-reference matches for entities in a collection.
      parameters:
        - in: path
          name: collection_id
          required: true
          type: integer
        - in: body
          schema:
            type: object
            properties:
              against_collection_ids:
                type: array
                description: Optional argument to specify collections agaist which cross-referencing will be done
                items:
                  type: integer
      produces:
        - application/json
      responses:
        202:
          schema:
            type: object
            properties:
              status:
                type: string
                description: accepted
      tags: ["Xref", "Collection"]

  /collections/{collection_id}/xref/{other_collection_id}:
    get:
      summary: Fetch cross-reference matches between collections
      description: Fetch cross-reference matches between 2 collections with ids `collection_id` and `other_collection_id`
      parameters:
        - in: path
          name: collection_id
          required: true
          type: integer
        - in: path
          name: other_collection_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/XrefResponse'
      tags: ["Xref", "Collection"]

  /collections/{collection_id}/xref/export:
    get:
      summary: Download cross-reference results
      description: Download results of cross-referencing as an excel file
      parameters:
        - in: path
          name: collection_id
          required: true
          type: integer
      produces:
        - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
      responses:
        200:
          schema:
            type: file
      tags: ["Xref", "Collection"]

  /status:
    get:
      summary: Get an overview of collections being processed
      description: List collections being processed currently and pending task counts
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/SystemStatusResponse'
      tags: ["Status"]

  /groups:
    get:
      summary: List groups
      description: Get the list of groups the user belongs to. Groups are used for authorization.
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/GroupsResponse'
      tags: ["Group"]

  /notifications:
    get:
      summary: Get notifications
      description: Get all the notifications for the user
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/NotificationsResponse'
      tags: ["Notification"]
    delete:
      summary: Clear notifications
      description: Delete all notification for the user
      produces:
        - application/json
      responses:
        202:
          schema:
            type: object
            properties:
              status:
                type: string
                description: ok
      tags: ["Notification"]

  /collections/{collection_id}/permissions:
    get:
      summary: Get permissions for a collection
      description: Get the list of all permissions for the collection with id `collection_id`
      parameters:
        - in: path
          name: collection_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/PermissionsResponse'
      tags: ["Permission", "Collection"]
    post:
      summary: Update permissions for a collection
      description: Update permissions for the collection with id `collection_id`
      parameters:
        - in: path
          name: collection_id
          required: true
          type: integer
        - in: body
          type: array
          items:
            type: object
            properties:
              write:
                type: boolean
              read:
                type: boolean
              role_id:
                type: integer
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/PermissionsResponse'
      tags: ["Permission", "Collection"]

  /querylog:
    get:
      summary: Get query logs
      description: Get query logs for the user
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/QueryLogsResponse'
      tags: ["Query Log"]
    delete:
      summary: Clear query log
      description: Delete the query logs for a particular search term
      parameters:
        - in: query
          name: query
          type: string
      produces:
        - application/json
      responses:
        204:
          schema:
            type: object
            properties:
              status:
                type: string
      tags: ["Query Log"]

definitions:
  QueryResponse:
    type: object
    properties:
      status:
        type: string
        description: ok
      total:
        type: integer
      total_type:
        type: string
      page:
        type: integer
        description: Current page number
      limit:
        type: integer
      offset:
        type: integer
      pages:
        type: integer
        description: Total number of pages
      next:
        type: ["string", "null"]
        description: URL of the next set of results or null
      previous:
        type: ["string", "null"]
        description: URL of the previous set of results or null

  Alert:
    type: object
    properties:
      created_at:
        type: string
      updated_at:
        type: string
      id:
        type: integer
      query:
        type: string
        description: query string for the alert
      normalized:
        type: string
      writable:
        type: boolean
      links:
        type: object
        properties:
          self:
            type: string

  AlertsResponse:
    allOf:
      - $ref: '#/definitions/QueryResponse'
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Alert'

  CollectionCreateSchema:
    type: object
    properties:
      label:
        type: string
      foreign_id:
        type: string
      casefile:
        type: boolean
      summary:
        type: string
      publisher:
        type: string
      publisher_url:
        type: string
      data_url:
        type: string
      info_url:
        type: string
      countries:
        type: array
        items:
          type: string
      languages:
        type: array
        items:
          type: string
      category:
        type: string

  Collection:
    type: object
    properties:
      casefile:
        type: boolean
      schemata:
        type: object
      kind:
        type: string
      count:
        type: integer
      created_at:
        type: string
      label:
        type: string
      secret:
        type: boolean
      countries:
        type: array
        items:
          type: string
      collection_id:
        type: integer
      foreign_id:
        type: string
      updated_at:
        type: string
      category:
        type: string
      id:
        type: integer
      links:
        type: object
        properties:
          self:
            type: string
          xref:
            type: string
          xref_export:
            type: string
          reconcile:
            type: string
          ui:
            type: string
      writable:
        type: boolean
      creator:
        type: object
      team:
        type: object

  CollectionsResponse:
    allOf:
      - $ref: '#/definitions/QueryResponse'
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Collection'
      facets:
        type: object
  
  Entity:
    type: object
    properties:
      schema:
        type: string
      schemata:
        type: array
        items:
          type: string
      updated_at:
        type: string
      job_id:
        type: string
      name:
        type: string
      dates:
        type: array
        items:
          type: string
      countries:
        type: array
        items:
          type: string
      properties:
        type: object
      id:
        type: string
      score:
        type: float
      highlight:
        type: array
        items:
          type: string
      collection:
        $ref: '#/definitions/Collection'
      links:
        type: object
        properties:
          self:
            type: string
          reference:
            type: string
          tags:
            type: string
          ui:
            type: string
          pdf:
            type: string
          file:
            type: string
          csv:
            type: string
      writable:
        type: boolean

  EntitiesResponse:
    allOf:
      - $ref: '#/definitions/QueryResponse'
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Entity'
      links:
        type: object
        properties:
          export:
            type: string

  DocumentCreateSchema:
    type: object
    properties:
      foreign_id:
        type: string
      title:
        type: string
      summary:
        type: string
      countries:
        type: array
        items:
          type: string
      languages:
        type: array
        items:
          type: string
      keywords:
        type: array
        items:
          type: string
      date:
        type: string
      authored_at:
        type: string
      modified_at:
        type: string
      published_at:
        type: string
      retrieved_at:
        type: string
      file_name:
        type: string
      author:
        type: string
      generator:
        type: string
      crawler:
        type: string
      mime_type:
        type: string
      source_url:
        type: string
      parent_id :
        type: string

  XrefCollectionResponse:
    allOf:
      - $ref: '#/definitions/QueryResponse'
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/XrefCollection'

  XrefCollection:
    type: object
    properties:
      matches:
        type: integer
      parent:
        type: integer
      collection:
        $ref: '#/definitions/Collection'

  XrefResponse:
    allOf:
      - $ref: '#/definitions/QueryResponse'
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/XrefMatch'

  XrefMatch:
    type: object
    properties:
      created_at:
        type: string
      updated_at:
        type: string
      id:
        type: integer
      score:
        type: float
      collection_id:
        type: integer
      match_collection_id:
        type: integer
      entity:
        $ref: '#/definitions/Entity'
      match:
        $ref: '#/definitions/Entity'

  SystemStatusResponse:
    type: object
    properties:
      total:
        type: integer
      results:
        type: array
        items:
          allOf:
            - $ref: '#/definitions/CollectionStatus'
          properties:
            collection:
              $ref: '#/definitions/Collection'
            id:
              type: string

  CollectionStatus:
    type: object
    properties:
      finished:
        type: integer
      pending:
        type: integer
      running:
        type: integer
      jobs:
        type: array
        items:
          type: object
          properties:
            finished:
              type: integer
            pending:
              type: integer
            running:
              type: integer
            stages:
              type: array
              items:
                type: object
                properties:
                  finished:
                    type: integer
                  pending:
                    type: integer
                  running:
                    type: integer
                  job_id:
                    type: string
                  stage:
                    type: string

  GroupsResponse:
    type: object
    properties:
      total:
        type: integer
      results:
        type: array
        items:
          $ref: '#/definitions/Group'

  Group:
    type: object
    properties:
      created_at:
        type: string
      updated_at:
        type: string
      id:
        type: integer
      type:
        type: string
      name:
        type: string
      label:
        type: string
      is_admin:
        type: boolean

  NotificationsResponse:
    type: object
    properties:
      total:
        type: integer
      results:
        type: array
        items:
          type: object
          properties:
            created_at:
              type: string
            updated_at:
              type: string
            id:
              type: integer
            actor_id:
              type: integer
            event:
              type: object
              properties:
                name:
                  type: string
                templates:
                  type: string
                params:
                  type: object
            params:
              type: object

  PermissionsResponse:
    type: object
    properties:
      total:
        type: integer
      results:
        type: array
        items:
          type: object
          properties:
            created_at:
              type: string
            updated_at:
              type: string
            id:
              type: integer
            read:
              type: boolean
            write:
              type: boolean
            role:
              $ref: '#/definitions/Role'

  Role:
    type: object
    properties:
      created_at:
        type: string
      updated_at:
        type: string
      id:
        type: integer
      type:
        type: string
        enum: ["user", "group", "system"]
      name:
        type: string
      label:
        type: string
      email:
        type: string
      api_key:
        type: string
      is_admin:
        type: boolean
      is_muted:
        type: boolean
      has_password:
        type: boolean
      writeable:
        type: boolean
      links:
        type: object

  QueryLogsResponse:
    allOf:
      - $ref: '#/definitions/QueryResponse'
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/QueryLog'

  QueryLog:
    type: object
    properties:
      query:
        type: string
      first:
        type: string
      last:
        type: string
      count:
        type: integer
