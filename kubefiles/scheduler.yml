apiVersion: apps/v1
kind: Deployment
metadata:
  name: search-scheduler
  namespace: aleph
  labels:
    app: search-scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: search-scheduler
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: search-scheduler
    spec:
      affinity: # Ask k8s to preferr that pods are placed across zones if available
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{env "REPONAME"}}
              topologyKey: failure-domain.beta.kubernetes.io/zone
      restartPolicy: Always
      containers:
        - name: search-scheduler
          image: alephdata/aleph:2.2.1
          imagePullPolicy: Always
          command:
            - celery
            - -A
            - aleph.queues
            - beat
            - -s
            - /var/lib/celerybeat-schedule.db
          resources:
            requests:
              memory: REPLACEME:MEMORY_LIMIT_SCHEDULER
              cpu: REPLACEME:CPU_LIMIT_SCHEDULER
            limits:
              memory: REPLACEME:MEMORY_LIMIT_SCHEDULER
              cpu: REPLACEME:CPU_LIMIT_SCHEDULER
#          env:
#            - name: DATAVAULT_DATABASE_URI
#              valueFrom:
#                secretKeyRef:
#                  name: common-secrets
#                  key: DATAVAULT_SIDECAR_URI
          envFrom:
            - configMapRef:
                name: search-config
            - secretRef:
                name: common-secrets
          volumeMounts:
            - mountPath: /secrets
              name: secrets-mounted
        - name: search-db-sidecar
          image: b.gcr.io/cloudsql-docker/gce-proxy:latest
          imagePullPolicy: Always
          command:
            - /cloud_sql_proxy
            - -dir=/cloudsql
            - -instances=REPLACEME:SQL_CONNECTION_STRING
            - -credential_file=/secrets/service-account.json
          volumeMounts:
            - mountPath: /secrets
              name: secrets-mounted
      volumes:
        - name: secrets-mounted
          secret:
            secretName: secrets-mounted
